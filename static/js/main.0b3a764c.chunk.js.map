{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","contract_balance","buyer_private_key","owner","contract","tokens_minted","minted","tokens","mintTokens","address","Buyer","buy_tokens","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","DistributionContract","networks","instance","Contract","abi","setState","methods","call","then","result","alert","error","handleMintChange","event","target","value","handleMintProcess","mint_tokens","send","from","handleTokenLeft","tokensLeft","handleAddressChange","handleSearch","list","no_of_tokens","handleBuyerChange","handleBuyTokenChange","handleBuyProcess","cost","BuyToken","handleNewOwner","newOwner","setNewOwner","transferOwnership","handleBuyerPrivateKe","contractBalance","Contract_Balance","className","Container","fluid","Image","src","width","height","this","Form","Control","type","placeholder","defaultValue","onChange","Button","variant","onClick","min","href","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6jyGAqCeA,G,MAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA3BoB,+DC8KrBQ,E,4MA5KbC,MAAQ,CAACC,iBAAiB,KAAOC,kBAAkB,KAAMC,MAAM,KAAMC,SAAU,KAAMC,cAAc,KAAMC,OAAO,KAAMC,OAAO,KAAMC,WAAW,KAAMC,QAAQ,KAAMC,MAAM,KAAMC,WAAW,M,EAEzLC,kB,sBAAoB,kCAAAvB,EAAA,+EAGGN,IAHH,cAGVQ,EAHU,gBAMOA,EAAKsB,IAAIC,cANhB,8BASQvB,EAAKsB,IAAIE,IAAIC,QATrB,OASVC,EATU,OAUVC,EAAkBC,EAAqBC,SAASH,GAChDI,EAAW,IAAI9B,EAAKsB,IAAIS,SAC5BH,EAAqBI,IACrBL,GAAmBA,EAAgBT,SAKrC,EAAKe,SAAS,CAAEpB,SAAUiB,IAC1B3B,QAAQC,IAAI,EAAKK,MAAMI,UACtB,EAAKJ,MAAMI,SAASqB,QAAQtB,QAAQuB,OACpCC,MAAK,SAACC,GACL,EAAKJ,SAAS,CAACrB,MAAMyB,OAtBP,kDA2BhBC,MAAM,0EAGNnC,QAAQoC,MAAR,MA9BgB,0D,EAkCnBC,iBAAiB,SAACC,GACf,EAAKR,SAAS,CACZhB,WAAWwB,EAAMC,OAAOC,S,EAI/BC,kBAAkB,WACjB,EAAKnC,MAAMI,SAASqB,QAAQW,YAAY,EAAKpC,MAAMQ,YAAY6B,KAAK,CAACC,KAAK,EAAKtC,MAAMG,QACpFwB,KAAKE,MAAM,sB,EAGZU,gBAAgB,WAEd,EAAKvC,MAAMI,SAASqB,QAAQe,aAAad,KAAK,CAACY,KAAK,EAAKtC,MAAMG,QAC9DwB,MAAK,SAACC,GACL,EAAKJ,SAAS,CACZjB,OAAOqB,IAETlC,QAAQC,IAAIiC,O,EAGhBa,oBAAoB,SAACT,GACnB,EAAKR,SAAS,CACZf,QAAQuB,EAAMC,OAAOC,S,EAGzBQ,aAAa,WACX,EAAK1C,MAAMI,SAASqB,QAAQkB,KAAK,EAAK3C,MAAMS,SAASiB,KAAK,CAACY,KAAK,EAAKtC,MAAMG,QAC1EwB,MAAK,SAACC,GACL,EAAKJ,SAAS,CAAClB,OAAOsB,EAAO,GAAGvB,cAAcuB,EAAOgB,eACrDlD,QAAQC,IAAIiC,O,EAGfiB,kBAAkB,SAACb,GAClB,EAAKR,SAAS,CACZd,MAAMsB,EAAMC,OAAOC,S,EAGpBY,qBAAqB,SAACd,GACvB,EAAKR,SAAS,CACZb,WAAWqB,EAAMC,OAAOC,S,EAG3Ba,iB,sBAAiB,4BAAA1D,EAAA,6DACN2D,EAA2B,GAAtB,EAAKhD,MAAMW,WAAe,KADzB,SAEQ,EAAKX,MAAMI,SAASqB,QAAQwB,SAAS,EAAKjD,MAAMU,MAAM,EAAKV,MAAMW,YAAY0B,KAAK,CAACC,KAAK,EAAKtC,MAAMU,MACrHwB,MAAMc,IACPrB,KAAKjC,QAAQC,KACbgC,KAAKE,MAAM,2BALA,yD,EAQhBqB,eAAe,SAAClB,GACd,EAAKR,SAAS,CACZ2B,SAASnB,EAAMC,OAAOC,S,EAI1BkB,Y,sBAAY,sBAAA/D,EAAA,sEACL,EAAKW,MAAMI,SAASqB,QAAQ4B,kBAAkB,EAAKrD,MAAMmD,UAAUd,KAAK,CAACC,KAAK,EAAKtC,MAAMG,QAC9FwB,KAAKE,MAAM,8IAFD,OAIX,EAAK7B,MAAMI,SAASqB,QAAQtB,QAAQuB,OACnCC,MAAK,SAACC,GACN,EAAKJ,SAAS,CAACrB,MAAMyB,OAEtBlC,QAAQC,IAAI,EAAKK,MAAMG,OARZ,2C,EAWZmD,qBAAqB,SAACtB,GACpB,EAAKR,SAAS,CAACtB,kBAAkB8B,EAAMC,OAAOC,S,EAKhDqB,gB,sBAAgB,sBAAAlE,EAAA,sEACR,EAAKW,MAAMI,SAASqB,QAAQ+B,mBAAmB9B,KAAK,CAACY,KAAK,EAAKtC,MAAMG,QAC1EwB,MAAK,SAACC,GAAD,OAAU,EAAKJ,SAAS,CAACvB,iBAAiB2B,OAFlC,2C,uDAQhB,OACE,yBAAK6B,UAAU,OACf,kBAACC,EAAA,EAAD,CAAWC,OAAK,GAGhB,4BAAQF,UAAU,WAClB,oEACA,iEACE,wBAAIA,UAAU,eAAd,cAAuC,kBAACG,EAAA,EAAD,CAAOC,IAAI,WAAWC,MAAM,OAAOC,OAAO,WAInF,6BAASN,UAAU,SACnB,sCAAW,6BAAX,IAAiB,iEACjB,6CAAmBO,KAAKhE,MAAMG,OAE9B,mDACC,kBAAC8D,EAAA,EAAKC,QAAN,CAAcC,KAAK,OAAOC,YAAY,oBAAoBC,aAAcL,KAAKhE,MAAMmD,SAAUmB,SAAUN,KAAKd,iBAC3G,kBAACqB,EAAA,EAAD,CAAQJ,KAAK,SAASK,QAAQ,SAASC,QAAST,KAAKZ,aAArD,OAEF,4CACC,kBAACa,EAAA,EAAKC,QAAN,CAAcC,KAAK,SAASO,IAAI,IAAIN,YAAY,6BAA6BC,aAAcL,KAAKhE,MAAMQ,WAAY8D,SAAUN,KAAKjC,mBACjI,kBAACwC,EAAA,EAAD,CAAQJ,KAAK,SAASK,QAAQ,OAAOC,QAAST,KAAK7B,mBAAnD,QAEA,uDACA,kBAAC8B,EAAA,EAAKC,QAAN,CAAcC,KAAK,OAAOC,YAAY,8BAA8BC,aAAcL,KAAKhE,MAAMS,QAAS6D,SAAUN,KAAKvB,sBACrH,kBAAC8B,EAAA,EAAD,CAAQJ,KAAK,SAASK,QAAQ,OAAOC,QAAST,KAAKtB,cAAnD,UACA,sCACCsB,KAAKhE,MAAMM,OAAO,mCAAY,qCAE/B,uCAAa0D,KAAKhE,MAAMK,eAExB,6CACA,uBAAGsE,KAAK,IAAIF,QAAST,KAAKzB,iBAA1B,UACA,4BAAKyB,KAAKhE,MAAMO,QAEhB,yCAAc,uBAAGoE,KAAK,IAAIF,QAAST,KAAKT,iBAA1B,YAAuD,6BAAMS,KAAKhE,MAAMC,iBAAtF,WAIA,6BAASwD,UAAU,UACnB,wCAAa,oDACb,2CACA,kBAACQ,EAAA,EAAKC,QAAN,CAAcC,KAAK,OAAOC,YAAY,kBAAkBC,aAAcL,KAAKhE,MAAMU,MAAO4D,SAAUN,KAAKnB,oBAAoB,6BAC3H,6DACA,kBAACoB,EAAA,EAAKC,QAAN,CAAcC,KAAK,SAASO,IAAI,IAAIN,YAAY,gBAAgBC,aAAcL,KAAKhE,MAAMW,WAAY2D,SAAUN,KAAKlB,uBAAuB,6BAC3I,kBAACyB,EAAA,EAAD,CAAQJ,KAAK,SAASK,QAAQ,UAAUC,QAAST,KAAKjB,kBAAtD,c,GArKW6B,aCMEC,QACW,cAA7B1F,OAAO2F,SAASC,UAEe,UAA7B5F,OAAO2F,SAASC,UAEhB5F,OAAO2F,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,MAAK,SAAA6D,GACjCA,EAAaC,kB","file":"static/js/main.0b3a764c.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport DistributionContract from \"./contracts/Distribution.json\";\nimport Web3 from \"web3\";\nimport {Container,Button,Form,Image,Alert} from \"react-bootstrap\";\nimport \"./App.css\"\nimport getWeb3 from \"./getWeb3\"\nclass App extends Component {\n  state = {contract_balance:null , buyer_private_key:null, owner:null, contract: null, tokens_minted:null, minted:null, tokens:null, mintTokens:null, address:null, Buyer:null, buy_tokens:null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = DistributionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        DistributionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ contract: instance});\n      console.log(this.state.contract)\n       this.state.contract.methods.owner().call()\n      .then((result)=>{\n        this.setState({owner:result})\n      })\n     \n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n   handleMintChange=(event)=>{\n      this.setState({\n        mintTokens:event.target.value\n      })\n    }\n  \n handleMintProcess=()=>{\n  this.state.contract.methods.mint_tokens(this.state.mintTokens).send({from:this.state.owner})\n  .then(alert(\"Mint successful.\"))\n }\n\n  handleTokenLeft=()=>{\n    \n    this.state.contract.methods.tokensLeft().call({from:this.state.owner})\n    .then((result)=>{\n      this.setState({\n        tokens:result\n      })\n      console.log(result)\n    })\n  }\n  handleAddressChange=(event)=>{\n    this.setState({\n      address:event.target.value\n    })\n  }\n  handleSearch=()=>{\n    this.state.contract.methods.list(this.state.address).call({from:this.state.owner})\n    .then((result)=>{\n      this.setState({minted:result[0],tokens_minted:result.no_of_tokens})\n      console.log(result)\n    })\n  }\n   handleBuyerChange=(event)=>{\n    this.setState({\n      Buyer:event.target.value\n    })\n   }\n     handleBuyTokenChange=(event)=>{\n    this.setState({\n      buy_tokens:event.target.value\n    })\n   }\n   handleBuyProcess=async()=>{\n        const cost=this.state.buy_tokens*0.1*1000000000000000000;\n        const Result= await this.state.contract.methods.BuyToken(this.state.Buyer,this.state.buy_tokens).send({from:this.state.Buyer,\n          value:cost})   \n        .then(console.log)\n        .then(alert(\"Transaction successful\"))\n         }\n\n    handleNewOwner=(event)=>{\n      this.setState({\n        newOwner:event.target.value\n      })\n          }\n\n    setNewOwner=async()=>{\n     await this.state.contract.methods.transferOwnership(this.state.newOwner).send({from:this.state.owner})\n     .then(alert(\"If this step is compeleted then ownership will be transfered to the new Owner and you will loose all your privilages over smart contract.\"\n      ))\n     this.state.contract.methods.owner().call()\n     .then((result)=>{\n      this.setState({owner:result})\n     })\n     console.log(this.state.owner)\n    }\n\n    handleBuyerPrivateKe=(event)=>{\n      this.setState({buyer_private_key:event.target.value})\n    }\n\n\n\n    contractBalance=async()=>{\n      await this.state.contract.methods.Contract_Balance().call({from:this.state.owner})\n      .then((result)=>this.setState({contract_balance:result}))\n    }\n\n \n  render() {\n   \n    return (\n      <div className=\"App\">\n      <Container fluid>\n\n\n      <header className=\"heading\">\n      <h1 >Welcome to Smart Tokenization System</h1>\n      <small>(Developed By Shreyansh Singh)</small>\n        <h3 className=\"sub_heading\">Good to Go!<Image src=\"cool.gif\" width=\"70px\" height=\"70px\"/></h3>\n      </header>\n\n\n      <section className=\"owner\">\n      <h2>OWNER's<br/> <small>are welcomed in this section.</small></h2>\n      <h3>Current Owner:{this.state.owner}</h3>\n\n      <h3>Transfer OwnerShip:</h3>\n       <Form.Control type=\"text\" placeholder=\"New Owner Address\" defaultValue={this.state.newOwner} onChange={this.handleNewOwner}/>\n        <Button type=\"Button\" variant=\"danger\" onClick={this.setNewOwner}>SET</Button>\n\n      <h3>Mint tokens:</h3>\n       <Form.Control type=\"number\" min=\"1\" placeholder=\"No of tokens to be minted.\" defaultValue={this.state.mintTokens} onChange={this.handleMintChange} />\n       <Button type=\"Button\" variant=\"info\" onClick={this.handleMintProcess}>MINT</Button>\n\n       <h3>Record of Distribution:</h3>\n       <Form.Control type=\"text\" placeholder=\"address to be searched for.\" defaultValue={this.state.address} onChange={this.handleAddressChange} />\n       <Button type=\"Button\" variant=\"info\" onClick={this.handleSearch}>SEARCH</Button>\n       <h4>Minted:{\n        this.state.minted?<b>True</b>:<b>False</b>\n       }</h4>\n       <h4>Token's:{this.state.tokens_minted}</h4>\n       \n       <h3>Token's Left:</h3>\n       <a href=\"#\" onClick={this.handleTokenLeft}>Reveal</a>\n       <h3>{this.state.tokens}</h3>\n\n       <h3>Balance : <a href=\"#\" onClick={this.contractBalance}>*refresh</a><br/>{this.state.contract_balance} Wei's</h3>\n\n      </section> \n\n       <section className=\"client\">\n       <h3>Welcome, <small>dear coustumer .</small></h3>\n       <h3>Buy tokens:</h3>\n       <Form.Control type=\"text\" placeholder=\"Buyer's address\" defaultValue={this.state.Buyer} onChange={this.handleBuyerChange}/><br/>\n       <small>*1 token cost is 0.1 Ether</small>\n       <Form.Control type=\"number\" min=\"1\" placeholder=\"No of tokens.\" defaultValue={this.state.buy_tokens} onChange={this.handleBuyTokenChange}/><br/>\n       <Button type=\"button\" variant=\"success\" onClick={this.handleBuyProcess}>BUY</Button>\n      </section>\n       </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}